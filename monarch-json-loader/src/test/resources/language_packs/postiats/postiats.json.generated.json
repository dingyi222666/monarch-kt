{
  "defaultToken": "invalid",
  "tokenPostfix": ".pats",
  "brackets": [
    [
      ",(",
      ")",
      "delimiter.parenthesis"
    ],
    [
      "`(",
      ")",
      "delimiter.parenthesis"
    ],
    [
      "%(",
      ")",
      "delimiter.parenthesis"
    ],
    [
      "'(",
      ")",
      "delimiter.parenthesis"
    ],
    [
      "'{",
      "}",
      "delimiter.parenthesis"
    ],
    [
      "@(",
      ")",
      "delimiter.parenthesis"
    ],
    [
      "@{",
      "}",
      "delimiter.brace"
    ],
    [
      "@[",
      "]",
      "delimiter.square"
    ],
    [
      "#[",
      "]",
      "delimiter.square"
    ],
    [
      "{",
      "}",
      "delimiter.curly"
    ],
    [
      "[",
      "]",
      "delimiter.square"
    ],
    [
      "(",
      ")",
      "delimiter.parenthesis"
    ],
    [
      "<",
      ">",
      "delimiter.angle"
    ]
  ],
  "start": "root",
  "keywords": [
    "abstype",
    "abst0ype",
    "absprop",
    "absview",
    "absvtype",
    "absviewtype",
    "absvt0ype",
    "absviewt0ype",
    "as",
    "and",
    "assume",
    "begin",
    "classdec",
    "datasort",
    "datatype",
    "dataprop",
    "dataview",
    "datavtype",
    "dataviewtype",
    "do",
    "end",
    "extern",
    "extype",
    "extvar",
    "exception",
    "fn",
    "fnx",
    "fun",
    "prfn",
    "prfun",
    "praxi",
    "castfn",
    "if",
    "then",
    "else",
    "ifcase",
    "in",
    "infix",
    "infixl",
    "infixr",
    "prefix",
    "postfix",
    "implmnt",
    "implement",
    "primplmnt",
    "primplement",
    "import",
    "let",
    "local",
    "macdef",
    "macrodef",
    "nonfix",
    "symelim",
    "symintr",
    "overload",
    "of",
    "op",
    "rec",
    "sif",
    "scase",
    "sortdef",
    "sta",
    "stacst",
    "stadef",
    "static",
    "staload",
    "dynload",
    "try",
    "tkindef",
    "typedef",
    "propdef",
    "viewdef",
    "vtypedef",
    "viewtypedef",
    "prval",
    "var",
    "prvar",
    "when",
    "where",
    "with",
    "withtype",
    "withprop",
    "withview",
    "withvtype",
    "withviewtype"
  ],
  "keywords_dlr": [
    "$delay",
    "$ldelay",
    "$arrpsz",
    "$arrptrsize",
    "$d2ctype",
    "$effmask",
    "$effmask_ntm",
    "$effmask_exn",
    "$effmask_ref",
    "$effmask_wrt",
    "$effmask_all",
    "$extern",
    "$extkind",
    "$extype",
    "$extype_struct",
    "$extval",
    "$extfcall",
    "$extmcall",
    "$literal",
    "$myfilename",
    "$mylocation",
    "$myfunction",
    "$lst",
    "$lst_t",
    "$lst_vt",
    "$list",
    "$list_t",
    "$list_vt",
    "$rec",
    "$rec_t",
    "$rec_vt",
    "$record",
    "$record_t",
    "$record_vt",
    "$tup",
    "$tup_t",
    "$tup_vt",
    "$tuple",
    "$tuple_t",
    "$tuple_vt",
    "$break",
    "$continue",
    "$raise",
    "$showtype",
    "$vcopyenv_v",
    "$vcopyenv_vt",
    "$tempenver",
    "$solver_assert",
    "$solver_verify"
  ],
  "keywords_srp": [
    "#if",
    "#ifdef",
    "#ifndef",
    "#then",
    "#elif",
    "#elifdef",
    "#elifndef",
    "#else",
    "#endif",
    "#error",
    "#prerr",
    "#print",
    "#assert",
    "#undef",
    "#define",
    "#include",
    "#require",
    "#pragma",
    "#codegen2",
    "#codegen3"
  ],
  "irregular_keyword_list": [
    "val+",
    "val-",
    "val",
    "case+",
    "case-",
    "case",
    "addr@",
    "addr",
    "fold@",
    "free@",
    "fix@",
    "fix",
    "lam@",
    "lam",
    "llam@",
    "llam",
    "viewt@ype+",
    "viewt@ype-",
    "viewt@ype",
    "viewtype+",
    "viewtype-",
    "viewtype",
    "view+",
    "view-",
    "view@",
    "view",
    "type+",
    "type-",
    "type",
    "vtype+",
    "vtype-",
    "vtype",
    "vt@ype+",
    "vt@ype-",
    "vt@ype",
    "viewt@ype+",
    "viewt@ype-",
    "viewt@ype",
    "viewtype+",
    "viewtype-",
    "viewtype",
    "prop+",
    "prop-",
    "prop",
    "type+",
    "type-",
    "type",
    "t@ype",
    "t@ype+",
    "t@ype-",
    "abst@ype",
    "abstype",
    "absviewt@ype",
    "absvt@ype",
    "for*",
    "for",
    "while*",
    "while"
  ],
  "keywords_types": [
    "bool",
    "double",
    "byte",
    "int",
    "short",
    "char",
    "void",
    "unit",
    "long",
    "float",
    "string",
    "strptr"
  ],
  "keywords_effects": [
    "0",
    "fun",
    "clo",
    "prf",
    "funclo",
    "cloptr",
    "cloref",
    "ref",
    "ntm",
    "1"
  ],
  "operators": [
    "@",
    "!",
    "|",
    "`",
    ":",
    "$",
    ".",
    "=",
    "#",
    "~",
    "..",
    "...",
    "=>",
    "=<>",
    "=/=>",
    "=>>",
    "=/=>>",
    "<",
    ">",
    "><",
    ".<",
    ">.",
    ".<>.",
    "->",
    "-<>"
  ],
  "symbols": "[=><!~?:&|+\\-*\\/\\^%]+",
  "IDENTFST": "[a-zA-Z_]",
  "IDENTRST": "[a-zA-Z0-9_'$]",
  "symbolic": "[%&+-./:=@~`^|*!$#?<>]",
  "digit": "[0-9]",
  "digitseq0": "@digit*",
  "xdigit": "[0-9A-Za-z]",
  "xdigitseq0": "@xdigit*",
  "INTSP": "[lLuU]",
  "FLOATSP": "[fFlL]",
  "fexponent": "[eE][+-]?[0-9]+",
  "fexponent_bin": "[pP][+-]?[0-9]+",
  "deciexp": "\\.[0-9]*@fexponent?",
  "hexiexp": "\\.[0-9a-zA-Z]*@fexponent_bin?",
  "irregular_keywords": "val[+-]?|case[+-]?|addr\\@?|fold\\@|free\\@|fix\\@?|lam\\@?|llam\\@?|prop[+-]?|type[+-]?|view[+-@]?|viewt@?ype[+-]?|t@?ype[+-]?|v(iew)?t@?ype[+-]?|abst@?ype|absv(iew)?t@?ype|for\\*?|while\\*?",
  "ESCHAR": "[ntvbrfa\\\\\\?'\"\\(\\[\\{]",
  "tokenizer": {
    "root": [
      [
        "[ \\t\\r\\n]+",
        {
          "token": ""
        }
      ],
      [
        "\\(\\*\\)",
        {
          "token": "invalid"
        }
      ],
      [
        "\\(\\*",
        {
          "token": "comment",
          "next": "lexing_COMMENT_block_ml"
        }
      ],
      [
        "\\(",
        "@brackets"
      ],
      [
        "\\)",
        "@brackets"
      ],
      [
        "\\[",
        "@brackets"
      ],
      [
        "\\]",
        "@brackets"
      ],
      [
        "\\{",
        "@brackets"
      ],
      [
        "\\}",
        "@brackets"
      ],
      [
        ",\\(",
        "@brackets"
      ],
      [
        ",",
        {
          "token": "delimiter.comma"
        }
      ],
      [
        ";",
        {
          "token": "delimiter.semicolon"
        }
      ],
      [
        "@\\(",
        "@brackets"
      ],
      [
        "@\\[",
        "@brackets"
      ],
      [
        "@\\{",
        "@brackets"
      ],
      [
        ":<",
        {
          "token": "keyword",
          "next": "@lexing_EFFECT_commaseq0"
        }
      ],
      [
        "\\.@symbolic+",
        {
          "token": "identifier.sym"
        }
      ],
      [
        "\\.@digit*@fexponent@FLOATSP*",
        {
          "token": "number.float"
        }
      ],
      [
        "\\.@digit+",
        {
          "token": "number.float"
        }
      ],
      [
        "\\$@IDENTFST@IDENTRST*",
        {
          "cases": {
            "@keywords_dlr": {
              "token": "keyword.dlr"
            },
            "@default": {
              "token": "namespace"
            }
          }
        }
      ],
      [
        "\\#@IDENTFST@IDENTRST*",
        {
          "cases": {
            "@keywords_srp": {
              "token": "keyword.srp"
            },
            "@default": {
              "token": "identifier"
            }
          }
        }
      ],
      [
        "%\\(",
        {
          "token": "delimiter.parenthesis"
        }
      ],
      [
        "^%{(#|\\^|\\$)?",
        {
          "token": "keyword",
          "next": "@lexing_EXTCODE",
          "nextEmbedded": "text/javascript"
        }
      ],
      [
        "^%}",
        {
          "token": "keyword"
        }
      ],
      [
        "'\\(",
        {
          "token": "delimiter.parenthesis"
        }
      ],
      [
        "'\\[",
        {
          "token": "delimiter.bracket"
        }
      ],
      [
        "'\\{",
        {
          "token": "delimiter.brace"
        }
      ],
      [
        "(')(\\@ESCHAR|\\[xX]@xdigit+|\\@digit+)(')",
        [
          "string",
          "string.escape",
          "string"
        ]
      ],
      [
        "'[^\\']'",
        "string"
      ],
      [
        "\"",
        "string.quote",
        "@lexing_DQUOTE"
      ],
      [
        "`\\(",
        "@brackets"
      ],
      [
        "\\",
        {
          "token": "punctuation"
        }
      ],
      [
        "@irregular_keywords(?!@IDENTRST)",
        {
          "token": "keyword"
        }
      ],
      [
        "@IDENTFST@IDENTRST*[<!\\[]?",
        {
          "cases": {
            "@keywords": {
              "token": "keyword"
            },
            "@keywords_types": {
              "token": "type"
            },
            "@default": {
              "token": "identifier"
            }
          }
        }
      ],
      [
        "\\/\\/\\/\\/",
        {
          "token": "comment",
          "next": "@lexing_COMMENT_rest"
        }
      ],
      [
        "\\/\\/.*$",
        {
          "token": "comment"
        }
      ],
      [
        "\\/\\*",
        {
          "token": "comment",
          "next": "@lexing_COMMENT_block_c"
        }
      ],
      [
        "-<|=<",
        {
          "token": "keyword",
          "next": "@lexing_EFFECT_commaseq0"
        }
      ],
      [
        "@symbolic+",
        {
          "cases": {
            "@operators": "keyword",
            "@default": "operator"
          }
        }
      ],
      [
        "0[xX]@xdigit+(@hexiexp|@fexponent_bin)@FLOATSP*",
        {
          "token": "number.float"
        }
      ],
      [
        "0[xX]@xdigit+@INTSP*",
        {
          "token": "number.hex"
        }
      ],
      [
        "0[0-7]+(?![0-9])@INTSP*",
        {
          "token": "number.octal"
        }
      ],
      [
        "@digit+(@fexponent|@deciexp)@FLOATSP*",
        {
          "token": "number.float"
        }
      ],
      [
        "@digit@digitseq0@INTSP*",
        {
          "token": "number.decimal"
        }
      ],
      [
        "@digit+@INTSP*",
        {
          "token": "number"
        }
      ]
    ],
    "lexing_COMMENT_block_ml": [
      [
        "[^\\(\\*]+",
        "comment"
      ],
      [
        "\\(\\*",
        "comment",
        "@push"
      ],
      [
        "\\(\\*",
        "comment.invalid"
      ],
      [
        "\\*\\)",
        "comment",
        "@pop"
      ],
      [
        "\\*",
        "comment"
      ]
    ],
    "lexing_COMMENT_block_c": [
      [
        "[^\\/*]+",
        "comment"
      ],
      [
        "\\*\\/",
        "comment",
        "@pop"
      ],
      [
        "[\\/*]",
        "comment"
      ]
    ],
    "lexing_COMMENT_rest": [
      [
        "$",
        "comment",
        "@pop"
      ],
      [
        ".*",
        "comment"
      ]
    ],
    "lexing_EFFECT_commaseq0": [
      [
        "@IDENTFST@IDENTRST+|@digit+",
        {
          "cases": {
            "@keywords_effects": {
              "token": "type.effect"
            },
            "@default": {
              "token": "identifier"
            }
          }
        }
      ],
      [
        ",",
        {
          "token": "punctuation"
        }
      ],
      [
        ">",
        {
          "token": "@rematch",
          "next": "@pop"
        }
      ]
    ],
    "lexing_EXTCODE": [
      [
        "^%}",
        {
          "token": "@rematch",
          "next": "@pop",
          "nextEmbedded": "@pop"
        }
      ],
      [
        "[^%]+",
        ""
      ]
    ],
    "lexing_DQUOTE": [
      [
        "\"",
        {
          "token": "string.quote",
          "next": "@pop"
        }
      ],
      [
        "(\\{\\$)(@IDENTFST@IDENTRST*)(\\})",
        [
          {
            "token": "string.escape"
          },
          {
            "token": "identifier"
          },
          {
            "token": "string.escape"
          }
        ]
      ],
      [
        "\\$",
        {
          "token": "string.escape"
        }
      ],
      [
        "\\(@ESCHAR|[xX]@xdigit+|@digit+)",
        {
          "token": "string.escape"
        }
      ],
      [
        "[^\\\"]+",
        {
          "token": "string"
        }
      ]
    ]
  }
}