{
  "defaultToken": "",
  "tokenPostfix": ".vb",
  "brackets": [
    [
      "{",
      "}",
      "delimiter.bracket"
    ],
    [
      "[",
      "]",
      "delimiter.array"
    ],
    [
      "(",
      ")",
      "delimiter.parenthesis"
    ],
    [
      "<",
      ">",
      "delimiter.angle"
    ],
    [
      "addhandler",
      "end addhandler",
      "keyword.tag-addhandler"
    ],
    [
      "class",
      "end class",
      "keyword.tag-class"
    ],
    [
      "enum",
      "end enum",
      "keyword.tag-enum"
    ],
    [
      "event",
      "end event",
      "keyword.tag-event"
    ],
    [
      "function",
      "end function",
      "keyword.tag-function"
    ],
    [
      "get",
      "end get",
      "keyword.tag-get"
    ],
    [
      "if",
      "end if",
      "keyword.tag-if"
    ],
    [
      "interface",
      "end interface",
      "keyword.tag-interface"
    ],
    [
      "module",
      "end module",
      "keyword.tag-module"
    ],
    [
      "namespace",
      "end namespace",
      "keyword.tag-namespace"
    ],
    [
      "operator",
      "end operator",
      "keyword.tag-operator"
    ],
    [
      "property",
      "end property",
      "keyword.tag-property"
    ],
    [
      "raiseevent",
      "end raiseevent",
      "keyword.tag-raiseevent"
    ],
    [
      "removehandler",
      "end removehandler",
      "keyword.tag-removehandler"
    ],
    [
      "select",
      "end select",
      "keyword.tag-select"
    ],
    [
      "set",
      "end set",
      "keyword.tag-set"
    ],
    [
      "structure",
      "end structure",
      "keyword.tag-structure"
    ],
    [
      "sub",
      "end sub",
      "keyword.tag-sub"
    ],
    [
      "synclock",
      "end synclock",
      "keyword.tag-synclock"
    ],
    [
      "try",
      "end try",
      "keyword.tag-try"
    ],
    [
      "while",
      "end while",
      "keyword.tag-while"
    ],
    [
      "with",
      "end with",
      "keyword.tag-with"
    ],
    [
      "using",
      "end using",
      "keyword.tag-using"
    ],
    [
      "do",
      "loop",
      "keyword.tag-do"
    ],
    [
      "for",
      "next",
      "keyword.tag-for"
    ]
  ],
  "ignoreCase": true,
  "keywords": [
    "AddHandler",
    "AddressOf",
    "Alias",
    "And",
    "AndAlso",
    "As",
    "Async",
    "Boolean",
    "ByRef",
    "Byte",
    "ByVal",
    "Call",
    "Case",
    "Catch",
    "CBool",
    "CByte",
    "CChar",
    "CDate",
    "CDbl",
    "CDec",
    "Char",
    "CInt",
    "Class",
    "CLng",
    "CObj",
    "Const",
    "Continue",
    "CSByte",
    "CShort",
    "CSng",
    "CStr",
    "CType",
    "CUInt",
    "CULng",
    "CUShort",
    "Date",
    "Decimal",
    "Declare",
    "Default",
    "Delegate",
    "Dim",
    "DirectCast",
    "Do",
    "Double",
    "Each",
    "Else",
    "ElseIf",
    "End",
    "EndIf",
    "Enum",
    "Erase",
    "Error",
    "Event",
    "Exit",
    "False",
    "Finally",
    "For",
    "Friend",
    "Function",
    "Get",
    "GetType",
    "GetXMLNamespace",
    "Global",
    "GoSub",
    "GoTo",
    "Handles",
    "If",
    "Implements",
    "Imports",
    "In",
    "Inherits",
    "Integer",
    "Interface",
    "Is",
    "IsNot",
    "Let",
    "Lib",
    "Like",
    "Long",
    "Loop",
    "Me",
    "Mod",
    "Module",
    "MustInherit",
    "MustOverride",
    "MyBase",
    "MyClass",
    "NameOf",
    "Namespace",
    "Narrowing",
    "New",
    "Next",
    "Not",
    "Nothing",
    "NotInheritable",
    "NotOverridable",
    "Object",
    "Of",
    "On",
    "Operator",
    "Option",
    "Optional",
    "Or",
    "OrElse",
    "Out",
    "Overloads",
    "Overridable",
    "Overrides",
    "ParamArray",
    "Partial",
    "Private",
    "Property",
    "Protected",
    "Public",
    "RaiseEvent",
    "ReadOnly",
    "ReDim",
    "RemoveHandler",
    "Resume",
    "Return",
    "SByte",
    "Select",
    "Set",
    "Shadows",
    "Shared",
    "Short",
    "Single",
    "Static",
    "Step",
    "Stop",
    "String",
    "Structure",
    "Sub",
    "SyncLock",
    "Then",
    "Throw",
    "To",
    "True",
    "Try",
    "TryCast",
    "TypeOf",
    "UInteger",
    "ULong",
    "UShort",
    "Using",
    "Variant",
    "Wend",
    "When",
    "While",
    "Widening",
    "With",
    "WithEvents",
    "WriteOnly",
    "Xor"
  ],
  "tagwords": [
    "If",
    "Sub",
    "Select",
    "Try",
    "Class",
    "Enum",
    "Function",
    "Get",
    "Interface",
    "Module",
    "Namespace",
    "Operator",
    "Set",
    "Structure",
    "Using",
    "While",
    "With",
    "Do",
    "Loop",
    "For",
    "Next",
    "Property",
    "Continue",
    "AddHandler",
    "RemoveHandler",
    "Event",
    "RaiseEvent",
    "SyncLock"
  ],
  "symbols": "[=><!~?;\\.,:&|+\\-*\\/\\^%]+",
  "integersuffix": "U?[DI%L&S@]?",
  "floatsuffix": "[R#F!]?",
  "tokenizer": {
    "root": [
      {
        "include": "@whitespace"
      },
      [
        "next(?!\\w)",
        {
          "token": "keyword.tag-for"
        }
      ],
      [
        "loop(?!\\w)",
        {
          "token": "keyword.tag-do"
        }
      ],
      [
        "end\\s+(?!for|do)(addhandler|class|enum|event|function|get|if|interface|module|namespace|operator|property|raiseevent|removehandler|select|set|structure|sub|synclock|try|while|with|using)",
        {
          "token": "keyword.tag-$1"
        }
      ],
      [
        "[a-zA-Z_]\\w*",
        {
          "cases": {
            "@tagwords": {
              "token": "keyword.tag-$0"
            },
            "@keywords": {
              "token": "keyword.$0"
            },
            "@default": "identifier"
          }
        }
      ],
      [
        "^\\s*#\\w+",
        "keyword"
      ],
      [
        "\\d*\\d+e([\\-+]?\\d+)?(@floatsuffix)",
        "number.float"
      ],
      [
        "\\d*\\.\\d+(e[\\-+]?\\d+)?(@floatsuffix)",
        "number.float"
      ],
      [
        "&H[0-9a-f]+(@integersuffix)",
        "number.hex"
      ],
      [
        "&0[0-7]+(@integersuffix)",
        "number.octal"
      ],
      [
        "\\d+(@integersuffix)",
        "number"
      ],
      [
        "#.*#",
        "number"
      ],
      [
        "[{}()\\[\\]]",
        "@brackets"
      ],
      [
        "@symbols",
        "delimiter"
      ],
      [
        "[\"\\u201c\\u201d]",
        {
          "token": "string.quote",
          "next": "@string"
        }
      ]
    ],
    "whitespace": [
      [
        "[ \\t\\r\\n]+",
        ""
      ],
      [
        "(\\'|REM(?!\\w)).*$",
        "comment"
      ]
    ],
    "string": [
      [
        "[^\"\\u201c\\u201d]+",
        "string"
      ],
      [
        "[\"\\u201c\\u201d]{2}",
        "string.escape"
      ],
      [
        "[\"\\u201c\\u201d]C?",
        {
          "token": "string.quote",
          "next": "@pop"
        }
      ]
    ]
  }
}